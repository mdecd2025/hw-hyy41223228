<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-hyy41223228/">https://mdecd2025.github.io/hw-hyy41223228/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-hyy41223228">https://github.com/mdecd2025/hw-hyy41223228</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>repo</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document

# 定義資料來源 URL
url = "https://mde.tw/list/2b.txt"

# 讀取資料
data = open(url).readlines()

# 跳過標題行，取得學員資料
all_stud = data[1:]

# 顯示學員總數
print("總共有 " + str(len(all_stud)) + "名學員")

# 取得 HTML 中的元素 id 為 "brython_div1"
brython_div1 = document["brython_div1"]

# 逐行處理學員資料
for stud in all_stud:
    # 假設學員資料的格式為 "學號 學員賬號"
    student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號
    if len(student_info) == 2:  # 確保每行有學號和帳號
        student_id = student_info[0].strip()  # 學號
        student_account = student_info[1].strip()  # 學員賬號

        # 創建 GitHub 和作業網站的超鏈接
        github_link = f"https://github.com/mdecd2025/hw-{student_account}"
        homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"
        
        # 將學號作為 GitHub repository 的鏈接
        brython_div1 &lt;= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結
        brython_div1 &lt;= " "  # 空格
        
        # 插入作業網站的超鏈接，標題改為 "(repo)"
        brython_div1 &lt;= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)
        
        # 插入換行
        brython_div1 &lt;= html.BR()  # 換行</pre>
<h1>tasks</h1>
<p>task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作:</p>
<p>task1 (自行製作可攜程式系統)</p>
<p>task2 (使用 SSH 協定執行作業倉儲的推送)</p>
<p>task3 與 task4 則為 HW2 的內容之一</p>
<p>task3 (使用 Solvespace 建立平面四連桿系統零組件)</p>
<p>task4 (使用 Onshape 建立平面四連桿系統零組件)</p>
<p>task5 與 task6 則為 HW3 的主要內容</p>
<p>task5 (Webots Tutorial 1 ~3)</p>
<p>task6 (Webots Tutorial 4 ~6)</p>
<h2>wink</h2>
<h3>IPV6</h3>
<p><a href="https://mdecd2025.github.io/hw-hyy41223228/content/Brython.html?src=https://gist.githubusercontent.com/hyy41223228/cd94e0a1db2aa0734d0b70ab190188b9/raw/49da233d438f0a21b9c5622160b2627c6e3ab220/gistfile1.txt">任務一運行結果</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html

# 學號列表（從您提供的文件複製）
student_numbers = [
    "40923137", "41023114", "41023205", "41023206", "41023210",
    "41023213", "41023215", "41023216", "41023218", "41023232",
    "41023237", "41071202", "41071203", "41071204", "41223201",
    "41223202", "41223203", "41223205", "41223206", "41223207",
    "41223208", "41223209", "41223210", "41223211", "41223212",
    "41223214", "41223215", "41223216", "41223217", "41223218",
    "41223219", "41223220", "41223221", "41223222", "41223223",
    "41223224", "41223225", "41223226", "41223227", "41223228",
    "41223229", "41223230", "41223231", "41223232", "41223233",
    "41223234", "41223235", "41223236", "41223237", "41223239",
    "41223240", "41223242", "41223243", "41223244", "41223245",
    "41223246", "41223247", "41223248", "41223249", "41223250",
    "41223251", "41223252", "41223253", "41271217", "41271236",
    "41271237"
]

# 創建學員連結列表
def create_student_links():
    div = document["brython_div1"]
    div.clear()  # 清空既有內容
    
    # 基本 IPv6 位址格式
    base_ipv6 = "2001:288:6004:17:fff1:cd25:0000:b"
    port = "8000"
    
    # 使用學號生成連結
    for i, student_id in enumerate(student_numbers, 1):  # 從 1 開始計數
        # 格式化序號為三位數 (001-066)
        student_num = f"{i:03d}"
        # 完整的 IPv6 位址
        ipv6_addr = f"{base_ipv6}{student_num}"
        # 完整的 URL
        url = f"http://[{ipv6_addr}]:{port}"
        
        # 使用學號作為顯示文字
        link = html.A(student_id, href=url, target="_blank")
        # 每個連結後添加換行
        div &lt;= link
        div &lt;= html.BR()

# 執行函數
create_student_links()
</pre>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2XTaAyHvc78" width="560"></iframe><span></span></p>
<h2>task1</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P6JJUlHAAwU" width="560"></iframe><span></span></p>
<h3>list</h3>
<p><a href="https://mdecd2025.github.io/hw-hyy41223228/content/Brython.html?src=https://gist.githubusercontent.com/hyy41223228/cbd3cf1ef4ac72eb323a0016ac0e9d2e/raw/10edbf9c479803eb80b97305b1dcc704247fbecb/41223228g3">g3成員</a></p>
<p>查找g3成員的github頁面超鏈接和作業網站超鏈接</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, window

# 定義資料來源 URL
url = "https://mde.tw/list/2b.txt"

# 定義要查找的學號列表
target_ids = ["41223226", "41223228", "41223206", "41223235", "41223227", "41223215"]

# 顯示學員總數
print("正在處理學員資料...")

# 取得 HTML 中的元素 id 為 "brython_div1"
brython_div1 = document["brython_div1"]

# 使用 JavaScript 的 fetch API 來抓取資料
def process_data(response_text):
    # 將抓取到的資料分行
    data = response_text.splitlines()

    # 跳過標題行，取得學員資料
    all_stud = data[1:]

    # 逐行處理學員資料
    for stud in all_stud:
        # 假設學員資料的格式為 "學號 學員賬號"
        student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號
        if len(student_info) == 2:  # 確保每行有學號和帳號
            student_id = student_info[0].strip()  # 學號
            student_account = student_info[1].strip()  # 學員賬號

            # 檢查學號是否在目標學號列表中
            if student_id in target_ids:
                # 創建 GitHub 和作業網站的超鏈接
                github_link = f"https://github.com/mdecd2025/hw-{student_account}"
                homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"
                
                # 顯示該學號的 GitHub 和作業網站
                brython_div1 &lt;= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結
                brython_div1 &lt;= " "  # 空格
                brython_div1 &lt;= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)
                brython_div1 &lt;= html.BR()  # 換行

# 使用 JavaScript 的 fetch API 拉取資料
window.fetch(url).then(lambda response: response.text()).then(process_data)</pre>
<p><a href="https://www.youtube.com/watch?v=Pa0trAHisoI&amp;ab_channel=hadog">詢問gpt製作程式影片</a><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Pa0trAHisoI" width="560"></iframe><br/><br/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document

# 定義資料來源 URL
url = "https://mde.tw/list/2b.txt"

# 讀取資料
data = open(url).readlines()

# 跳過標題行，取得學員資料
all_stud = data[1:]

# 顯示學員總數
print("總共有 " + str(len(all_stud)) + "名學員")

# 取得 HTML 中的元素 id 為 "brython_div1"
brython_div1 = document["brython_div1"]

# 逐行處理學員資料
for stud in all_stud:
    # 假設學員資料的格式為 "學號 學員賬號"
    student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號
    if len(student_info) == 2:  # 確保每行有學號和帳號
        student_id = student_info[0].strip()  # 學號
        student_account = student_info[1].strip()  # 學員賬號

        # 創建 GitHub 和作業網站的超鏈接
        github_link = f"https://github.com/mdecd2025/hw-{student_account}"
        homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"
        
        # 將學號作為 GitHub repository 的鏈接
        brython_div1 &lt;= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結
        brython_div1 &lt;= " "  # 空格
        
        # 插入作業網站的超鏈接，標題改為 "(repo)"
        brython_div1 &lt;= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)
        
        # 插入換行
        brython_div1 &lt;= html.BR()  # 換行</pre>
<p>查找學員github超鏈接</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P6JJUlHAAwU" width="560"></iframe></p>
<h2>task2</h2>
<p></p>
<p></p>
<h3>w3</h3>
<p><a href="https://mdecd2025.github.io/hw-hyy41223228/content/Brython.html?src=https://gist.githubusercontent.com/hyy41223228/255a206672118b55bd653c11fb0aea13/raw/b0ba68eea979eeea81da3cb67524fa73ccef3643/%25E5%2585%25A7%25E5%25AE%25B91">列出目前尚未納入分組的學員名單.</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, window

# 資料來源
url = "https://mde.tw/list/2b.txt"

# 已分組 GitHub 帳號清單
grouped_accounts = {
    '41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716',
    '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw',
    '41223216', '41223217', '41223248', 'emma0312', '41223242', '41223203',
    '41223144', '41223235', 'RAY41223215', 'hyy41223228', '41223227', '41223206',
    '41223226-0', 'Cloud41223237', 'Yujenchuang', '41223225', 'ljg41223220',
    'supowen', 'jacky93111', '41223246', 'Liu41223244', '41223236', '41223219',
    '41271237', '41223249', '41223229', '41223224', '41223222', '41223231',
    'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218',
    'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204',
    '41071202', 'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10'
}

brython_div1 = document["brython_div1"]

def process_data(response_text):
    data = response_text.splitlines()
    all_stud = data[1:]

    for stud in all_stud:
        student_info = stud.strip().split()

        if len(student_info) == 2:
            student_id = student_info[0].strip()
            student_account = student_info[1].strip()

            # 帳號不在已分組名單 → 尚未分組
            if student_account not in grouped_accounts:
                brython_div1 &lt;= student_id
                brython_div1 &lt;= html.BR()

        elif len(student_info) == 1:
            # 沒有帳號的直接列出
            student_id = student_info[0].strip()
            brython_div1 &lt;= student_id
            brython_div1 &lt;= html.BR()

window.fetch(url).then(lambda response: response.text()).then(process_data)
</pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RjX95uqpmDk" width="560"></iframe></p>
<h2>task3</h2>
<h4>使用 Solvespace 建立平面四連桿系統零組件</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/EhMxBjHIhf4" width="560"></iframe></p>
<p>連桿 90mm中間連接件</p>
<table></table>
<table></table>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/aNWAaVAZ6Fo" width="560"></iframe></p>
<p>搖臂 60mm</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/skI-7qo2c3c" width="560"></iframe></p>
<p>曲柄 30mm</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Df9G7ArYnLE" width="560"></iframe></p>
<p><a href="/downloads/篮球四连杆机构.7z">連桿機構檔案</a></p>
<h2>task4</h2>
<h3>w6</h3>
<p>hw2的連桿尺寸是曲柄40mm鏈接桿60mm搖桿90mm</p>
<p>組裝影片</p>
<p><a href="/downloads/41223228 hw-2.7z">/downloads/41223228 hw-2.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ar_JmL5LBAU" width="560"></iframe></p>
<p>使用task3的零件組裝後導出stl檔，現在要把stl檔轉成<span>Webots 可以使用的obj檔</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on: 2025-02-09 15:40:51 UTC
Author: mdecycu
Description: STL file converter that splits STL files into multiple OBJ files with MTL materials
"""

import struct
import numpy as np
from pathlib import Path

class STLConverter:
    def __init__(self, filename, scale=0.001):  # 新增 scale 參數，預設 0.001 將 mm 轉換為 m
        self.filename = filename
        self.scale = scale
        self.is_binary = self._check_if_binary()
        
    def _check_if_binary(self):
        """檢查 STL 檔案是否為二進制格式"""
        with open(self.filename, 'rb') as f:
            header = f.read(5).decode('utf-8', errors='ignore')
            return not header.startswith('solid')
    
    def _read_binary_stl(self):
        """讀取二進制 STL 檔案"""
        with open(self.filename, 'rb') as f:
            f.seek(80)
            triangle_count = struct.unpack('I', f.read(4))[0]
            
            triangles = []
            normals = []
            
            for _ in range(triangle_count):
                nx, ny, nz = struct.unpack('fff', f.read(12))
                normals.append([nx, ny, nz])
                
                triangle = []
                for _ in range(3):
                    x, y, z = struct.unpack('fff', f.read(12))
                    # 在讀取頂點時進行縮放
                    triangle.append([x * self.scale, y * self.scale, z * self.scale])
                triangles.append(triangle)
                
                f.seek(2, 1)
                
        return np.array(triangles), np.array(normals)
    
    def _read_ascii_stl(self):
        """讀取 ASCII STL 檔案"""
        triangles = []
        normals = []
        current_triangle = []
        
        with open(self.filename, 'r') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                    
                parts = line.split()
                if not parts:
                    continue
                
                if parts[0] == 'facet' and parts[1] == 'normal':
                    normals.append([float(parts[2]), float(parts[3]), float(parts[4])])
                elif parts[0] == 'vertex':
                    # 在讀取頂點時進行縮放
                    current_triangle.append([
                        float(parts[1]) * self.scale,
                        float(parts[2]) * self.scale,
                        float(parts[3]) * self.scale
                    ])
                elif parts[0] == 'endfacet':
                    if current_triangle:
                        triangles.append(current_triangle)
                        current_triangle = []
        
        return np.array(triangles), np.array(normals)
    
    def _split_by_connected_components(self, triangles, normals):
        """使用連通分量分割模型"""
        vertex_to_triangle = {}
        for i, triangle in enumerate(triangles):
            for vertex in triangle:
                vertex_tuple = tuple(vertex)
                if vertex_tuple in vertex_to_triangle:
                    vertex_to_triangle[vertex_tuple].append(i)
                else:
                    vertex_to_triangle[vertex_tuple] = [i]
        
        visited = set()
        components = []
        
        def dfs(triangle_idx):
            component = []
            stack = [triangle_idx]
            
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    component.append(current)
                    
                    for vertex in triangles[current]:
                        vertex_tuple = tuple(vertex)
                        for neighbor in vertex_to_triangle[vertex_tuple]:
                            if neighbor not in visited:
                                stack.append(neighbor)
            
            return component
        
        for i in range(len(triangles)):
            if i not in visited:
                component = dfs(i)
                components.append(component)
        
        return components
    
    def _write_binary_stl(self, filename, triangles, normals):
        """寫入二進制 STL 檔案"""
        with open(filename, 'wb') as f:
            f.write(b'\x00' * 80)
            f.write(struct.pack('I', len(triangles)))
            
            for triangle, normal in zip(triangles, normals):
                f.write(struct.pack('fff', *normal))
                for vertex in triangle:
                    f.write(struct.pack('fff', *vertex))
                f.write(struct.pack('H', 0))

    def _write_mtl(self, filename, material_name):
        """寫入 MTL 材質檔案"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"newmtl {material_name}\n")
            f.write("Ka 0.2 0.2 0.2\n")  # Ambient color
            f.write("Kd 0.8 0.8 0.8\n")  # Diffuse color
            f.write("Ks 0.5 0.5 0.5\n")  # Specular color
            f.write("Ns 50.0\n")         # Specular exponent
            f.write("d 1.0\n")           # Transparency (1.0 = opaque)
            f.write("illum 2\n")         # Illumination model

    def _write_obj(self, filename, triangles, normals):
        """寫入 OBJ 檔案"""
        vertex_dict = {}
        vertex_list = []
        normal_list = []
        faces = []
        
        for triangle, normal in zip(triangles, normals):
            face_indices = []
            
            for vertex in triangle:
                vertex_tuple = tuple(vertex)
                if vertex_tuple not in vertex_dict:
                    vertex_dict[vertex_tuple] = len(vertex_list) + 1
                    vertex_list.append(vertex)
                face_indices.append(vertex_dict[vertex_tuple])
            
            normal_list.append(normal)
            faces.append(face_indices)
        
        # Generate material name from the obj filename
        material_name = filename.stem
        # Create MTL filename using Path
        mtl_filename = filename.with_suffix('.mtl')
        
        # Write OBJ file
        with open(filename, 'w', encoding='utf-8') as f:
            # Reference the MTL file
            f.write(f"mtllib {mtl_filename.name}\n")
            f.write(f"usemtl {material_name}\n\n")
            
            for v in vertex_list:
                f.write(f"v {v[0]} {v[1]} {v[2]}\n")
            
            for n in normal_list:
                f.write(f"vn {n[0]} {n[1]} {n[2]}\n")
            
            for i, face in enumerate(faces):
                f.write(f"f {face[0]}//{i+1} {face[1]}//{i+1} {face[2]}//{i+1}\n")
        
        # Write the corresponding MTL file
        self._write_mtl(mtl_filename, material_name)
    
    def split_and_convert(self):
        """分割 STL 檔案並轉換為 OBJ 格式"""
        if self.is_binary:
            triangles, normals = self._read_binary_stl()
        else:
            triangles, normals = self._read_ascii_stl()
        
        components = self._split_by_connected_components(triangles, normals)
        
        output_dir = Path('split_parts')
        output_dir.mkdir(exist_ok=True)
        
        for i, component in enumerate(components):
            component_triangles = triangles[component]
            component_normals = normals[component]
            
            base_name = f"part_{i + 1}"
            stl_filename = output_dir / f"{base_name}.stl"
            obj_filename = output_dir / f"{base_name}.obj"
            
            #self._write_binary_stl(stl_filename, component_triangles, component_normals)
            self._write_obj(obj_filename, component_triangles, component_normals)
            
            print(f"已儲存零件 {i + 1} 到:")
            #print(f"  STL: {stl_filename}")
            print(f"  OBJ: {obj_filename}")
            print(f"  MTL: {obj_filename.with_suffix('.mtl')}")
        
        return len(components)

# 直接轉換指定的 STL 檔案
try:
    # 指定要轉換的 STL 檔案名稱和縮放比例
    stl_file = "win2.stl"
    scale = 0.01  # 縮放比例，可以根據需要調整</pre>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lgX_2xysFRQ" width="560"></iframe></span></p>
<p><span></span></p>
<h3>w4</h3>
<p><a href="/downloads/41223228 hw-1.7z">/downloads/41223228.zip</a>完成的檔案</p>
<p><strong>建造平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m</strong></p>
<p>1.建立robot群組</p>
<p>2.robot下的children建立1個solid群組，2個higejoint群組，並選一個為首要，命名為joint1</p>
<p>3.solid的children中建立shape作為固定桿(X1,Y0.1,Z0.1)</p>
<p>4.<span>joint1下的endpoint選擇solid性質，命名為link1，並往下的children中建立pose及higejoint，pose下在建立shape為主動桿(0.4,0.1,0.1)</span><span>，shape命名為link1，再將主動桿所屬的pose的translation設為(0.2,0,0)(此為link1中心點)，而higejoint為主動桿與第二桿連接，並命名為joint2。</span></p>
<p><span>5.joint1的endpoint下有translation(此為連接處的座標點)，設(-0.5,0,0.1)</span></p>
<p><span>6.在joint1下有boundingObject，選擇pose，往下children選擇USE link1，並調整座標至(0.2,0,0)(與link1的pose座標一致)，在設置physics</span></p>
<p>7.以上順序重複製作，主要為base--&gt;joint1--&gt;link1--&gt;<span>joint2--&gt;link2--&gt;</span><span>joint3--&gt;link3--&gt;joint4</span></p>
<p><span>8.joint4在robot群組中的children，與joint1同排列，並將endpoint設為solidreference，並選為use link3</span></p>
<p><span>9.每一階的joint中各有jointparameters、device、emdpoint，其中link1上的device要加入Rotationalmotor，並命名為motor</span></p>
<p><span>10.而每一階的jointparameters，axis設為(0,0,1)(意為繞z軸旋轉)，但anchor要設為桿的長度，這樣才是joint到joint的距離，分別為(-0.5,0,0)、(0.4,0,0)、(0.6,0,0)，此座標是接續的，原點根據base的起點，另外設置的joint4則為(0.5,0,0)</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sqQYrGttNcE" width="560"></iframe></p>
<h2>task5</h2>
<h3>w7</h3>
<p><span>solvespace shooter組裝影片</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_LBTaLOmuS8" width="560"></iframe></p>
<p><span>solvespace basket_ball_shooter繪製</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Q0rPn3WVvDY" width="560"></iframe></span></p><h3>w9</h3>
<h2>task6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><a href="/downloads/41223228 hw-1.7z">/downloads/41223228 hw-1.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sqQYrGttNcE" width="560"></iframe></p>
<p></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><a href="/downloads/41223228 hw-2.7z">/downloads/41223228 hw-2.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1JSt5m3vZr0" width="560"></iframe></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>W1~W3都在找出同學的github網站和倉儲，以及找出還未分組的成員。</p>
<p>W4~W8在練習<span>Webots的邏輯，跟做出四連桿機構。</span></p>
<p>各週網頁內容:<a href="https://mdecd2025.github.io/hw-hyy41223228/content/IPV6.htmlhttps://mdecd2025.github.io/hw-hyy41223228/content/IPV6.html">IPV6</a> <a href="https://mdecd2025.github.io/hw-hyy41223228/content/task1.html">task1</a> <a href="https://mdecd2025.github.io/hw-hyy41223228/content/list.html">list</a> <a href="https://mdecd2025.github.io/hw-hyy41223228/content/w3.html">W3</a> <a href="https://mdecd2025.github.io/hw-hyy41223228/content/task3.html">task3</a> <a href="https://mdecd2025.github.io/hw-hyy41223228/content/HW1.html">HW1</a></p>
<p></p>
<p>期中心得:這學期接觸到Webots，第一次碰到，在練習的時候發現，他很麻煩需要一定的邏輯，我也是看同學和老師的影片加上gpt，才勉強完成，如果加上接下來新的投籃機構，我覺得會需要很花很多的時間在上面。</p>
<p>期中自評影片:<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9E-o1BJnTz0" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>